import logging
import json
import requests
import allure


def decode_body(body):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞/–æ—Ç–≤–µ—Ç–∞."""
    if body is None:
        return None
    if isinstance(body, bytes):
        try:
            return body.decode('utf-8')
        except UnicodeDecodeError:
            return "<binary body>"
    return str(body)


def safe_json_pretty(response: requests.Response):
    """–ü—ã—Ç–∞–µ—Ç—Å—è –∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å JSON, –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç."""
    try:
        parsed = response.json()
        return json.dumps(parsed, indent=4, ensure_ascii=False)
    except ValueError:
        return response.text


def log_response(response: requests.Response, attach_to_allure: bool = True):
    """–õ–æ–≥–∏—Ä—É–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ Allure –≤–ª–æ–∂–µ–Ω–∏–µ."""

    method = response.request.method
    url = response.request.url
    status = response.status_code
    req_body = decode_body(getattr(response.request, "body", None))
    formatted_response = safe_json_pretty(response)

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    logging.info(f'‚û°Ô∏è Request: {method} {url}')
    if method in {"POST", "PUT", "PATCH"} and req_body:
        logging.debug(f'üì§ Request body: {req_body}')

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å —É—Ä–æ–≤–Ω–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if status < 400:
        logging.info(f'‚¨ÖÔ∏è Status Code: {status}')
        logging.debug(f'üì• Response body:\n{formatted_response}')
    elif status < 500:
        logging.warning(f'‚ö†Ô∏è Client error: {status}')
        logging.debug(f'‚ö†Ô∏è Response body:\n{formatted_response}')
    else:
        logging.error(f'‚ùå Server error: {status}')
        logging.debug(f'‚ùå Response body:\n{formatted_response}')

    # –í–ª–æ–∂–µ–Ω–∏–µ –≤ Allure
    if attach_to_allure:
        try:
            allure.attach(
                body=(
                    f"{method} {url}\n\n"
                    f"Request body:\n{req_body}\n\n"
                    f"Status code: {status}\n\n"
                    f"Response body:\n{formatted_response}"
                ),
                name="HTTP exchange",
                attachment_type=allure.attachment_type.TEXT
            )
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è Failed to attach HTTP exchange to Allure: {e}")
